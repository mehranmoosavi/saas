// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider  = "postgresql" // ارائه‌دهنده اصلی دیتابیس شما
  url       = env("DATABASE_URL")
}

// prisma/schema.prisma

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  OWNER
  ADMIN
  USER
}

model User {
  hashedPassword   String?
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role  
  orders        Order[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  favoriteFoods FavoriteFood[]
  addresses     Address[]
  reviews       Review[]
}

enum FoodType {
  DRINKING
  JAPANESE
  PERSIAN
  DESERT
  FAST_FOOD
}


model Food {
  id          String      @id @default(cuid())
  name        String      @unique
  type        FoodType
  description String?
  price       Decimal // Using Decimal for financial values
  stock       Int         @default(0) // Inventory control for each food item
  imageUrl    String?
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  favoritedBy FavoriteFood[]
  reviews     Review[]
}

enum OrderStatus {
  CART 
  PENDING
  COMPLETED
  CANCELLED
}

model Order {
  id         String      @id @default(cuid())
  user       User        @relation(fields: [userId], references: [id])
  userId     String
  items      OrderItem[]
  totalPrice Decimal
  status     OrderStatus @default(PENDING)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  deliveryMethod DeliveryMethod @default(PICKUP)
  address        Address?       @relation(fields: [addressId], references: [id])
  addressId      String?
}

model OrderItem {
  id        String @id @default(cuid())
  order     Order  @relation(fields: [orderId], references: [id])
  orderId   String
  food      Food   @relation(fields: [foodId], references: [id])
  foodId    String
  quantity  Int
  price     Decimal // Price of the food at the time of order
   @@unique([orderId, foodId])  
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FavoriteFood {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  food   Food   @relation(fields: [foodId], references: [id], onDelete: Cascade)
  foodId String
  
  createdAt DateTime @default(now())

  @@id([userId, foodId]) // کلید اصلی ترکیبی برای جلوگیری از لایک تکراری
}

enum DeliveryMethod {
  PICKUP // حضوری
  DELIVERY // تحویل در محل
}


model Address {
  id          String  @id @default(cuid())
  street      String
  city        String
  postalCode  String
  details     String? // توضیحات بیشتر مانند پلاک و واحد

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  orders Order[]

  createdAt DateTime @default(now())
}

model Review {
  id     String @id @default(cuid())
  rating Int    // امتیاز از ۱ تا ۵
  text   String // متن کامنت

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  food   Food   @relation(fields: [foodId], references: [id], onDelete: Cascade)
  foodId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, foodId]) // هر کاربر برای هر غذا فقط یک نظر می‌تواند ثبت کند
}
